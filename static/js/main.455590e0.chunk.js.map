{"version":3,"sources":["components/ToDoItem.js","components/Footer.js","components/Main.js","App.js","serviceWorker.js","index.js"],"names":["TodoItem","props","react_default","a","createElement","className","type","checked","completed","onChange","changeChecked","value","onClick","onRemove","Footer","count","showTodos","Main","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","toDoItems","filterParam","filteredTodos","addItem","event","key","newItem","target","setState","prevState","copy","objectSpread","filtered","removeItem","ToDoItem","changeComplited","setFilter","param","_this2","placeholder","onKeyDown","autoFocus","keys","map","item","index","components_ToDoItem","components_Footer","length","React","Component","App","components_Main","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.455590e0.chunk.js","sourcesContent":["import React from \"react\"\r\n\r\nfunction TodoItem(props) {\r\n    return (\r\n        <div className=\"todo\" >\r\n            <li className=\"todoItem\">\r\n                <input type=\"checkbox\"\r\n                    className=\"check\"\r\n                    checked={props.completed}\r\n                    onChange={() => props.changeChecked(props.value)}\r\n                />\r\n                <label>{props.value}</label>\r\n                <button className=\"close\"\r\n                    onClick={() => props.onRemove(props.value)} >âœ•</button>\r\n            </li>\r\n        </ div>\r\n    )\r\n}\r\n\r\nexport default TodoItem","import React from \"react\"\r\n\r\nfunction Footer(props) {\r\n    return (\r\n        <div className=\"footer\">\r\n            <div className=\"counter\">{props.count} item left</div>\r\n            <div className=\"buttons\">\r\n                <button type=\"button\"\r\n                    onClick={() => props.showTodos(\"all\")}>All</button>\r\n                <button type=\"button\"\r\n                    onClick={() => props.showTodos(\"active\")}\r\n                >Active</button>\r\n                <button type=\"button\"\r\n                    onClick={() => props.showTodos(\"complited\")}\r\n                >Complited</button>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Footer","import React from 'react';\r\nimport ToDoItem from './ToDoItem'\r\nimport Footer from './Footer'\r\n\r\nclass Main extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            toDoItems: {},\r\n            filterParam: \"all\",\r\n            filteredTodos: {}\r\n        };\r\n\r\n        this.addItem = (event) => {\r\n            if (event.key !== 'Enter') return\r\n            let newItem = event.target.value;\r\n            event.target.value = \"\";\r\n\r\n            this.setState(prevState => {\r\n                const copy = { ...prevState.toDoItems };\r\n                copy[newItem] = false;\r\n                return { toDoItems: copy };\r\n            })\r\n            this.filtered();\r\n        };\r\n\r\n        this.removeItem = (ToDoItem) => {\r\n\r\n            this.setState(prevState => {\r\n                const copy = { ...prevState.toDoItems };\r\n                delete copy[ToDoItem];\r\n                return { toDoItems: copy };\r\n            })\r\n            this.filtered();\r\n        };\r\n\r\n        this.changeComplited = (ToDoItem) => {\r\n\r\n            this.setState((prevState) => {\r\n                const copy = { ...prevState.toDoItems };\r\n                copy[ToDoItem] = !copy[ToDoItem];\r\n                return { toDoItems: copy };\r\n            });\r\n            this.filtered();\r\n        };\r\n\r\n        this.setFilter = (param) => {\r\n\r\n            this.setState({ filterParam: param }, function () { this.filtered() });\r\n        };\r\n\r\n        this.filtered = () => {\r\n\r\n            this.setState((prevState) => {\r\n                const copy = { ...prevState.toDoItems };\r\n\r\n                if (this.state.filterParam === \"active\") {\r\n                    for (let key in copy) {\r\n                        if (copy[key] !== false) {\r\n                            delete copy[key];\r\n                        }\r\n                    }\r\n                } else if (this.state.filterParam === \"complited\") {\r\n                    for (let key in copy) {\r\n                        if (copy[key] === false) {\r\n                            delete copy[key];\r\n                        }\r\n                    }\r\n                }\r\n                return { filteredTodos: copy };\r\n            })\r\n        }\r\n    };\r\n\r\n    render() {\r\n\r\n        return (\r\n            <div className=\"main\" >\r\n                <div className=\"arrow\">\r\n                    <input className=\"newTodo\"\r\n                        placeholder=\"What needs to be done?\"\r\n                        onKeyDown={this.addItem}\r\n                        autoFocus={true} >\r\n                    </input>\r\n                </div>\r\n                <ul className=\"list\">\r\n                    {this.state.filteredTodos &&\r\n                        Object.keys(this.state.filteredTodos).map((item, index) =>\r\n                            <ToDoItem key={index}\r\n                                value={item}\r\n                                onRemove={this.removeItem}\r\n                                completed={this.state.toDoItems[item]}\r\n                                changeChecked={this.changeComplited}\r\n                            />)}\r\n                </ul>\r\n                <Footer count={Object.keys(this.state.filteredTodos).length}\r\n                    showTodos={this.setFilter} />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Main;","import React from 'react';\r\nimport './App.css';\r\nimport Main from './components/Main'\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <header>\r\n        <h1>ToDos</h1>\r\n      </header>\r\n      <Main />\r\n      <footer>\r\n        <p>Double-click to edit a todo</p>\r\n        <p>Idea by Oscar Godson</p>\r\n        <p>Created by Svitlana Tsupryk</p>\r\n        <p>Part of TodoMVC</p>\r\n      </footer>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}