{"version":3,"sources":["components/ToDoItem.js","components/Footer.js","components/Main.js","App.js","serviceWorker.js","index.js"],"names":["TodoItem","props","completed","name","id","changeChecked","onRemove","react_default","a","createElement","className","type","checked","onChange","onClick","Footer","count","showTodos","Main","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","toDoItems","filterParam","currentValue","setValue","event","setState","target","value","addItem","prevState","concat","toConsumableArray","Date","now","preventDefault","removeItem","ToDoItem","filter","item","changeComplited","copy","forEach","setFilter","param","filteredItems","_this2","filteredTodos","onSubmit","placeholder","autoFocus","map","components_ToDoItem","key","components_Footer","length","React","Component","App","components_Main","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"sOAoBeA,MAlBf,SAAkBC,GAAO,IACbC,EAAiDD,EAAjDC,UAAWC,EAAsCF,EAAtCE,KAAMC,EAAgCH,EAAhCG,GAAIC,EAA4BJ,EAA5BI,cAAeC,EAAaL,EAAbK,SAC5C,OACIC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACXH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,YACVH,EAAAC,EAAAC,cAAA,SAAOE,KAAK,WACRD,UAAU,QACVE,QAASV,EACTW,SAAU,kBAAMR,EAAcD,MAElCG,EAAAC,EAAAC,cAAA,aAAQN,GACRI,EAAAC,EAAAC,cAAA,UAAQC,UAAU,QACdI,QAAS,kBAAMR,EAASF,KAD5B,aCQDW,MAnBf,SAAgBd,GAAO,IACXe,EAAqBf,EAArBe,MAAOC,EAAchB,EAAdgB,UACf,OACIV,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WAAWM,EAA1B,cACAT,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WACXH,EAAAC,EAAAC,cAAA,UAAQE,KAAK,SACTG,QAAS,kBAAMG,EAAU,SAD7B,OAEAV,EAAAC,EAAAC,cAAA,UAAQE,KAAK,SACTG,QAAS,kBAAMG,EAAU,YAD7B,UAGAV,EAAAC,EAAAC,cAAA,UAAQE,KAAK,SACTG,QAAS,kBAAMG,EAAU,eAD7B,gBC+FDC,cAvGX,SAAAA,EAAYjB,GAAO,IAAAkB,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACfC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,KAAMrB,KAEDyB,MAAQ,CACTC,UAAW,GACXC,YAAa,MACbC,aAAc,IAGlBV,EAAKW,SAAW,SAACC,GACbZ,EAAKa,SAAS,CAAEH,aAAcE,EAAME,OAAOC,SAG/Cf,EAAKgB,QAAU,SAACJ,GAEZZ,EAAKa,SAAS,SAAAI,GAAS,MAAK,CACxBT,UAAS,GAAAU,OAAAjB,OAAAkB,EAAA,EAAAlB,CACFgB,EAAUT,WADR,CAEL,CACIvB,GAAImC,KAAKC,MACTrC,KAAMiC,EAAUP,aAChB3B,WAAW,KAGnB2B,aAAc,MAElBE,EAAMU,kBAGVtB,EAAKuB,WAAa,SAACC,GAEfxB,EAAKa,SAAS,SAAAI,GAEV,MAAO,CAAET,UADIP,OAAAkB,EAAA,EAAAlB,CAAIgB,EAAUT,WAAWiB,OAAO,SAACC,GAAD,OAAUA,EAAKzC,KAAOuC,QAM3ExB,EAAK2B,gBAAkB,SAACH,GAEpBxB,EAAKa,SAAS,SAAAI,GACV,IAAMW,EAAI3B,OAAAkB,EAAA,EAAAlB,CAAOgB,EAAUT,WAM3B,OALAoB,EAAKC,QAAQ,SAACH,GACNA,EAAKzC,KAAOuC,IACZE,EAAK3C,WAAa2C,EAAK3C,aAGxB,CAAEyB,UAAWoB,MAI5B5B,EAAK8B,UAAY,SAACC,GACd/B,EAAKa,SAAS,CAAEJ,YAAasB,KAGjC/B,EAAKyB,OAAS,WACV,IACIO,EADAJ,EAAI3B,OAAAkB,EAAA,EAAAlB,CAAOD,EAAKO,MAAMC,WAE1B,OAAQR,EAAKO,MAAME,aACf,IAAK,SACDuB,EAAgBJ,EAAKH,OAAO,SAAAC,GAAI,OAAuB,IAAnBA,EAAK3C,YACzC,MACJ,IAAK,YACDiD,EAAgBJ,EAAKH,OAAO,SAAAC,GAAI,OAAuB,IAAnBA,EAAK3C,YACzC,MACJ,QAASiD,EAAgBJ,EAE7B,OAAOI,GAnEIhC,wEAuEV,IAAAiC,EAAA9B,KACC+B,EAAgB/B,KAAKsB,SAC3B,OACIrC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SACXH,EAAAC,EAAAC,cAAA,QAAM6C,SAAUhC,KAAKa,SACjB5B,EAAAC,EAAAC,cAAA,SAAOC,UAAU,UACb6C,YAAY,yBACZC,WAAW,EACXtB,MAAOZ,KAAKI,MAAMG,aAClBhB,SAAUS,KAAKQ,aAI3BvB,EAAAC,EAAAC,cAAA,MAAIC,UAAU,QACT2C,EAAcI,IAAI,SAACZ,GAAD,OACftC,EAAAC,EAAAC,cAACiD,EAAD,CAAUC,IAAKd,EAAKzC,GAChBA,GAAIyC,EAAKzC,GACTD,KAAM0C,EAAK1C,KACXG,SAAU8C,EAAKV,WACfxC,UAAWkD,EAAK1B,MAAMxB,UACtBG,cAAe+C,EAAKN,qBAGhCvC,EAAAC,EAAAC,cAACmD,EAAD,CAAQ5C,MAAOqC,EAAcQ,OACzB5C,UAAWK,KAAK2B,oBAjGjBa,IAAMC,WCiBVC,MAjBf,WACE,OACEzD,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,cACEF,EAAAC,EAAAC,cAAA,oBAEFF,EAAAC,EAAAC,cAACwD,EAAD,MACA1D,EAAAC,EAAAC,cAAA,cACEF,EAAAC,EAAAC,cAAA,wCACAF,EAAAC,EAAAC,cAAA,iCACAF,EAAAC,EAAAC,cAAA,wCACAF,EAAAC,EAAAC,cAAA,+BCHYyD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOjE,EAAAC,EAAAC,cAACgE,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.0f78f3f0.chunk.js","sourcesContent":["import React from \"react\"\r\n\r\nfunction TodoItem(props) {\r\n    const { completed, name, id, changeChecked, onRemove } = props;\r\n    return (\r\n        <div className=\"todo\" >\r\n            <li className=\"todoItem\">\r\n                <input type=\"checkbox\"\r\n                    className=\"check\"\r\n                    checked={completed}\r\n                    onChange={() => changeChecked(id)}\r\n                />\r\n                <label>{name}</label>\r\n                <button className=\"close\"\r\n                    onClick={() => onRemove(id)} >âœ•</button>\r\n            </li>\r\n        </ div>\r\n    )\r\n}\r\n\r\nexport default TodoItem","import React from \"react\"\r\n\r\nfunction Footer(props) {\r\n    const { count, showTodos } = props;\r\n    return (\r\n        <div className=\"footer\">\r\n            <div className=\"counter\">{count} item left</div>\r\n            <div className=\"buttons\">\r\n                <button type=\"button\"\r\n                    onClick={() => showTodos(\"all\")}>All</button>\r\n                <button type=\"button\"\r\n                    onClick={() => showTodos(\"active\")}\r\n                >Active</button>\r\n                <button type=\"button\"\r\n                    onClick={() => showTodos(\"completed\")}\r\n                >Completed</button>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Footer","import React from 'react';\r\nimport ToDoItem from './ToDoItem'\r\nimport Footer from './Footer'\r\n\r\nclass Main extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            toDoItems: [],\r\n            filterParam: \"all\",\r\n            currentValue: ''\r\n        };\r\n\r\n        this.setValue = (event) => {\r\n            this.setState({ currentValue: event.target.value })\r\n        }\r\n\r\n        this.addItem = (event) => {\r\n\r\n            this.setState(prevState => ({\r\n                toDoItems: [\r\n                    ...prevState.toDoItems,\r\n                    {\r\n                        id: Date.now(),\r\n                        name: prevState.currentValue,\r\n                        completed: false\r\n                    }\r\n                ],\r\n                currentValue: ''\r\n            }))\r\n            event.preventDefault();\r\n        };\r\n\r\n        this.removeItem = (ToDoItem) => {\r\n\r\n            this.setState(prevState => {\r\n                const copy = [...prevState.toDoItems].filter((item) => item.id !== ToDoItem);\r\n                return { toDoItems: copy };\r\n            })\r\n\r\n        };\r\n\r\n        this.changeComplited = (ToDoItem) => {\r\n\r\n            this.setState(prevState => {\r\n                const copy = [...prevState.toDoItems];\r\n                copy.forEach((item) => {\r\n                    if (item.id === ToDoItem) {\r\n                        item.completed = !item.completed\r\n                    }\r\n                })\r\n                return { toDoItems: copy };\r\n            });\r\n        };\r\n\r\n        this.setFilter = (param) => {\r\n            this.setState({ filterParam: param });\r\n        };\r\n\r\n        this.filter = () => {\r\n            let copy = [...this.state.toDoItems];\r\n            let filteredItems;\r\n            switch (this.state.filterParam) {\r\n                case \"active\":\r\n                    filteredItems = copy.filter(item => item.completed === false);\r\n                    break;\r\n                case \"completed\":\r\n                    filteredItems = copy.filter(item => item.completed === true);\r\n                    break;\r\n                default: filteredItems = copy;\r\n            }\r\n            return filteredItems;\r\n        };\r\n    }\r\n\r\n    render() {\r\n        const filteredTodos = this.filter();\r\n        return (\r\n            <div className=\"main\" >\r\n                <div className=\"arrow\">\r\n                    <form onSubmit={this.addItem}>\r\n                        <input className=\"newTodo\"\r\n                            placeholder=\"What needs to be done?\"\r\n                            autoFocus={true}\r\n                            value={this.state.currentValue}\r\n                            onChange={this.setValue}>\r\n                        </input>\r\n                    </form>\r\n                </div>\r\n                <ul className=\"list\">\r\n                    {filteredTodos.map((item) =>\r\n                        <ToDoItem key={item.id}\r\n                            id={item.id}\r\n                            name={item.name}\r\n                            onRemove={this.removeItem}\r\n                            completed={this.state.completed}\r\n                            changeChecked={this.changeComplited}\r\n                        />)}\r\n                </ul>\r\n                <Footer count={filteredTodos.length}\r\n                    showTodos={this.setFilter}\r\n                />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Main;","import React from 'react';\r\nimport './App.css';\r\nimport Main from './components/Main'\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <header>\r\n        <h1>ToDos</h1>\r\n      </header>\r\n      <Main />\r\n      <footer>\r\n        <p>Double-click to edit a todo</p>\r\n        <p>Idea by Oscar Godson</p>\r\n        <p>Created by Svitlana Tsupryk</p>\r\n        <p>Part of TodoMVC</p>\r\n      </footer>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}